# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/decouplio/all/decouplio.rbi
#
# decouplio-1.0.0alpha1

module Decouplio
end
module Decouplio::Const
end
module Decouplio::Const::Types
end
module Decouplio::Errors
end
class Decouplio::Errors::OptionsValidationError < StandardError
end
class Decouplio::OctoOptionsValidator
  def call; end
  def compose_message(message, *interpolation_params); end
  def initialize(options:); end
  def raise_validation_error(message); end
  def self.call(options:); end
  def validate_option_count; end
  def validate_option_keys; end
end
class Decouplio::OctoHashCase
  def self.hash_case; end
  def self.inherited(subclass); end
  def self.init_hash_case; end
  def self.on(strategy_flow, **options); end
  def self.validate_options(options); end
end
module Decouplio::Const::Colors
end
module Decouplio::Const::Validations
end
module Decouplio::Const::Validations::Common
end
class Decouplio::Errors::BaseError < StandardError
  def initialize(errored_option: nil, details: nil); end
  def interpolation_values; end
  def message; end
  def template; end
end
module Decouplio::Const::Validations::Palp
end
class Decouplio::Errors::PalpValidationError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
module Decouplio::Const::Validations::Resq
end
class Decouplio::Errors::ResqDefinitionError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
module Decouplio::Const::Validations::Wrap
end
class Decouplio::Errors::WrapBlockIsNotDefinedError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
class Decouplio::Errors::PalpBlockIsNotDefinedError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
module Decouplio::Const::Validations::Fail
end
class Decouplio::Errors::FailCanNotBeTheFirstStepError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
module Decouplio::Const::Validations::Octo
end
class Decouplio::Errors::OctoBlockIsNotDefinedError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
class Decouplio::LogicDsl
  def self.doby(doby_class, **options); end
  def self.fail(stp, **options); end
  def self.inherited(subclass); end
  def self.init_steps; end
  def self.octo(octo_name, **options, &block); end
  def self.palp(palp_name, **options, &block); end
  def self.palps; end
  def self.pass(stp, **options); end
  def self.resq(name = nil, **options); end
  def self.step(stp, **options); end
  def self.steps; end
  def self.wrap(name = nil, **options, &block); end
end
module Decouplio::Const::Results
end
module Decouplio::Steps
end
class Decouplio::Steps::BaseStep
  def name; end
  def process(*arg0); end
end
class Decouplio::Steps::Step < Decouplio::Steps::BaseStep
  def initialize(name:, on_success_type:, on_failure_type:); end
  def process(instance:); end
  def resolve(result:, instance:); end
end
class Decouplio::Steps::Fail < Decouplio::Steps::BaseStep
  def initialize(name:, on_success_type:, on_failure_type:); end
  def process(instance:); end
  def resolve(result:, instance:); end
end
class Decouplio::Steps::Pass < Decouplio::Steps::BaseStep
  def initialize(name:, on_success_type:); end
  def process(instance:); end
  def resolve(instance:); end
end
class Decouplio::Processor
  def self.call(first_step:, steps_pool:, steps_flow:, instance:); end
  def self.process(next_step_name, instance, steps_pool, steps_flow); end
end
class Decouplio::Steps::Wrap < Decouplio::Steps::BaseStep
  def initialize(name:, klass:, method:, wrap_flow:, on_success_type:, on_failure_type:); end
  def process(instance:); end
  def resolve(instance:); end
  def specific_wrap?; end
end
class Decouplio::Steps::Octo < Decouplio::Steps::BaseStep
  def hash_case; end
  def hash_case=(arg0); end
  def initialize(name:, ctx_key:); end
  def process(instance:); end
end
class Decouplio::Steps::BaseResq < Decouplio::Steps::BaseStep
  def initialize(handler_hash:, step_to_resq:); end
  def process(instance:); end
end
class Decouplio::Steps::ResqPass < Decouplio::Steps::BaseResq
end
class Decouplio::Steps::ResqFail < Decouplio::Steps::BaseResq
end
class Decouplio::Steps::IfConditionPass < Decouplio::Steps::BaseStep
  def initialize(name:); end
  def process(instance:); end
  def resolve(result:); end
end
class Decouplio::Steps::IfConditionFail < Decouplio::Steps::BaseStep
  def initialize(name:); end
  def process(instance:); end
  def resolve(result:, instance:); end
end
class Decouplio::Steps::UnlessConditionPass < Decouplio::Steps::BaseStep
  def initialize(name:); end
  def process(instance:); end
  def resolve(result:); end
end
class Decouplio::Steps::UnlessConditionFail < Decouplio::Steps::BaseStep
  def initialize(name:); end
  def process(instance:); end
  def resolve(result:, instance:); end
end
class Decouplio::Steps::InnerActionStep < Decouplio::Steps::BaseStep
  def initialize(name:, action:, on_success_type:, on_failure_type:); end
  def process(instance:); end
  def resolve(outcome:, instance:); end
end
class Decouplio::Steps::InnerActionFail < Decouplio::Steps::BaseStep
  def initialize(name:, action:, on_success_type:, on_failure_type:); end
  def process(instance:); end
  def resolve(outcome:, instance:); end
end
class Decouplio::Steps::InnerActionPass < Decouplio::Steps::BaseStep
  def initialize(name:, action:, on_success_type:, on_failure_type:); end
  def process(instance:); end
  def resolve(outcome:, instance:); end
end
class Decouplio::Steps::ServiceStep < Decouplio::Steps::BaseStep
  def initialize(name:, service:, on_success_type:, on_failure_type:); end
  def process(instance:); end
  def resolve(result:, instance:); end
end
class Decouplio::Steps::ServiceFail < Decouplio::Steps::BaseStep
  def initialize(name:, service:, on_success_type:, on_failure_type:); end
  def process(instance:); end
  def resolve(result:, instance:); end
end
class Decouplio::Steps::ServicePass < Decouplio::Steps::BaseStep
  def initialize(name:, service:, on_success_type:, on_failure_type:); end
  def process(instance:); end
  def resolve(instance:); end
end
class Decouplio::Steps::Doby < Decouplio::Steps::BaseStep
  def initialize(name:, doby_class:, doby_options:); end
  def process(instance:); end
  def resolve(result:, instance:); end
end
module Decouplio::Const::ReservedMethods
end
module Decouplio::Const::Validations::ActionOptionClass
end
class Decouplio::Errors::ActionClassError < Decouplio::Errors::BaseError
  def initialize(step_type:, errored_option:); end
  def interpolation_values; end
  def template; end
end
module Decouplio::Const::Validations::Step
end
class Decouplio::Errors::ExtraKeyForStepError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
class Decouplio::Errors::ExtraKeyForFailError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
class Decouplio::Errors::ExtraKeyForOctoError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
module Decouplio::Const::Validations::Pass
end
class Decouplio::Errors::ExtraKeyForPassError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
class Decouplio::Errors::ExtraKeyForResqError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
class Decouplio::Errors::ExtraKeyForWrapError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
class Decouplio::Errors::FailFinishHimError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
class Decouplio::Errors::InvalidErrorClassError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
class Decouplio::Errors::InvalidWrapNameError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
class Decouplio::Errors::PassFinishHimError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
class Decouplio::Errors::RequiredOptionsIsMissingForOctoError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
class Decouplio::Errors::ResqErrorClassError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
class Decouplio::Errors::ResqHandlerMethodError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
class Decouplio::Errors::StepFinishHimError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
class Decouplio::Errors::StepIsNotDefinedForStepError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
class Decouplio::Errors::StepIsNotDefinedForFailError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
class Decouplio::Errors::StepIsNotDefinedForWrapError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
class Decouplio::Errors::WrapFinishHimError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
class Decouplio::Errors::WrapKlassMethodError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
class Decouplio::Errors::StepControversialKeysError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
class Decouplio::Errors::FailControversialKeysError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
class Decouplio::Errors::PassControversialKeysError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
class Decouplio::Errors::OctoControversialKeysError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
class Decouplio::Errors::WrapControversialKeysError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
class Decouplio::Errors::PalpIsNotDefinedError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
class Decouplio::Errors::ErrorStoreError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
class Decouplio::Errors::StepNameError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
class Decouplio::OptionsValidator
  def call; end
  def check_fail_controversial_keys(options:); end
  def check_fail_extra_keys(options:); end
  def check_fail_finish_him(options:); end
  def check_octo_extra_keys(options:); end
  def check_octo_palps(hash_case:); end
  def check_octo_required_keys(options:); end
  def check_pass_extra_keys(options:); end
  def check_pass_finish_him(options:); end
  def check_resq_error_classes(options:); end
  def check_resq_exception_classes_inheritance(options:); end
  def check_resq_extra_keys(options:); end
  def check_resq_handler_method_is_a_symbol(options:); end
  def check_step_controversial_keys(options:); end
  def check_step_extra_keys(options:); end
  def check_step_finish_him(options:); end
  def check_step_presence_for_fail(options:, step_names:); end
  def check_step_presence_for_step(options:, step_names:); end
  def check_step_presence_for_wrap(options:, step_names:); end
  def check_wrap_controversial_keys(options:); end
  def check_wrap_extra_keys(options:); end
  def check_wrap_finish_him(options:); end
  def check_wrap_klass_method_presence(options:); end
  def check_wrap_name(name:); end
  def extract_step_names(flow:); end
  def initialize(flow:, palps:, next_steps:, action_class:); end
  def validate(options:, step_names:); end
  def validate_action(action_class:, type:); end
  def validate_error_store(parent_action_class:, child_action_class:); end
  def validate_fail(options:, step_names:); end
  def validate_name(name:); end
  def validate_octo(options:, hash_case:); end
  def validate_pass(options:); end
  def validate_resq(options:); end
  def validate_step(options:, step_names:); end
  def validate_wrap(options:, name:, step_names:); end
end
module Decouplio::Validators
end
class Decouplio::Validators::Condition
  def self.validate(condition_options:, type:); end
end
class Decouplio::Composer
  def self.compose(logic_container_raw_data:, action_class:, palp_prefix: nil, parent_flow: nil, next_steps: nil); end
  def self.compose_action(stp); end
  def self.compose_condition(stp, palp_prefix, flow); end
  def self.compose_doby_flow(stp, _step_id, flow, idx, flow_hash, next_steps); end
  def self.compose_fail_condition_flow(stp, flow, idx, flow_hash); end
  def self.compose_fail_flow(stp, step_id, flow, idx, flow_hash, next_steps); end
  def self.compose_flow(flow, palps, next_steps, action_class, flow_hash = nil); end
  def self.compose_octo_flow(stp, step_id, idx, flow, palps, flow_hash, action_class); end
  def self.compose_pass_condition_flow(stp, flow, idx, flow_hash); end
  def self.compose_resq(stp, palp_prefix, flow); end
  def self.compose_step_flow(stp, step_id, flow, idx, flow_hash, next_steps); end
  def self.compose_strategy(stp, palps, next_steps, action_class); end
  def self.compose_wrap(stp, action_class); end
  def self.create_doby(stp); end
  def self.create_fail(stp, flow); end
  def self.create_if_condition_fail(stp); end
  def self.create_if_condition_pass(stp); end
  def self.create_inner_action_fail(stp, flow); end
  def self.create_inner_action_pass(stp, flow); end
  def self.create_inner_action_step(stp, flow); end
  def self.create_inner_service_fail(stp, flow); end
  def self.create_inner_service_pass(stp, flow); end
  def self.create_inner_service_step(stp, flow); end
  def self.create_octo(stp); end
  def self.create_pass(stp, flow); end
  def self.create_resq_fail(stp, flow); end
  def self.create_resq_pass(stp, flow); end
  def self.create_step(stp, flow); end
  def self.create_step_instance(stp, flow); end
  def self.create_unless_condition_fail(stp); end
  def self.create_unless_condition_pass(stp); end
  def self.create_wrap(flow, stp); end
  def self.extract_palp_flow(stp); end
  def self.extract_palp_pool(stp); end
  def self.failure_type(flow, stp); end
  def self.finish_him(stp); end
  def self.next_failure_step(steps, idx, value); end
  def self.next_success_step(steps, idx, value); end
  def self.prepare_raw_data(flow, palp_prefix, action_class); end
  def self.random_id(name:, palp_prefix:, flow:); end
  def self.random_value; end
  def self.success_type(flow, stp); end
  def self.validate_flow(flow, palps, next_steps, action_class); end
end
class Decouplio::Flow
  def self.call(logic:, action_class:); end
end
class Decouplio::DefaultErrorHandler
  def add_error(key, message); end
  def errors; end
  def initialize; end
  def merge(error_store); end
end
module Decouplio::Const::Validations::Logic
end
class Decouplio::Errors::LogicRedefinitionError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
class Decouplio::Errors::LogicIsNotDefinedError < Decouplio::Errors::BaseError
  def interpolation_values; end
  def template; end
end
class Decouplio::Action
  def [](key); end
  def add_error(*args, **, &block); end
  def append_railway_flow(stp); end
  def ctx; end
  def error_store; end
  def errors(*args, **, &block); end
  def fail_action; end
  def failure?; end
  def initialize(error_store:, parent_railway_flow: nil, parent_ctx: nil, wrapper: nil, **params); end
  def inspect; end
  def pass_action; end
  def railway_flow; end
  def self.call(**params); end
  def self.error_store; end
  def self.error_store=(arg0); end
  def self.error_store_class(klass); end
  def self.inherited(child_class); end
  def self.logic(&block); end
  def success?; end
  def to_s; end
  extend Forwardable
end
